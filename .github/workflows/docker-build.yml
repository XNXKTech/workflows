name: Docker

on:
  workflow_call:
    inputs:
      runs-on:
        default: "['ubuntu-latest']"
        description: The OSs that the workflow is run on
        required: false
        type: string
      timeout:
        default: 60
        description: The number of minutes to wait for the operation to complete.
        required: false
        type: number
      registry:
        default: ''
        description: 'Docker registry'
        required: false
        type: string
      custom-tag:
        default: ''
        required: false
        type: string
      dockerfile:
        default: 'Dockerfile'
        required: false
        type: string
      context:
        type: string
        default: .
      debug:
        type: string
        required: false
        default: false
      platforms:
        type: string
        required: false
        default: linux/amd64
      build-args:
        type: string
        required: false
        default: |
          CI=true
    secrets:
      USERNAME:
        required: false
      PASSWORD:
        required: false
      TCR_USERNAME:
        required: false
      TCR_PASSWORD:
        required: false
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_PASSWORD:
        required: false

defaults:
  run:
    shell: bash -euxo pipefail {0}

env:
  REGISTRY: ${{ inputs.registry }}
  TCR_USERNAME: ${{ secrets.TCR_USERNAME != '' && secrets.TCR_USERNAME || secrets.USERNAME }}
  TCR_PASSWORD: ${{ secrets.TCR_PASSWORD != '' && secrets.TCR_PASSWORD || secrets.PASSWORD }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  DEBUG: ${{ inputs.debug == 'true' || github.event.inputs.debug == 'true' || '' }}

jobs:
  determine_registries:
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: Determine Registries
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: ${{fromJson(inputs.runs-on)}}

    outputs:
      dockerhub: ${{ steps.setvar.outputs.dockerhub }}
      tcr: ${{ steps.setvar.outputs.tcr }}
      registry: ${{ steps.setvar.outputs.registry }}
    steps:
      - name: Setup repo name to lowercase
        id: reponame
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.repository }}

      - name: Set output variables
        id: setvar
        run: |
          if [ -n "$DOCKERHUB_USERNAME" ] &&
             [ -n "$DOCKERHUB_PASSWORD" ]; then
            echo "DockerHub registry credentials set"
            echo "::set-output name=dockerhub::true"
          fi
          if [ -n "$TCR_USERNAME" ] &&
             [ -n "$TCR_PASSWORD" ]; then
            echo "Tencent Container Registry credentials set"
            echo "::set-output name=tcr::true"
          fi
          if [ -n "$REGISTRY" ]; then
            echo "Registry credentials set"
            echo "::set-output name=registry::${{ inputs.registry }}/${{ steps.reponame.outputs.lowercase }}"
          fi

  Build:
    name: Image Build
    needs: determine_registries

    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ inputs.timeout }}

    strategy:
      matrix:
        os: ${{fromJson(inputs.runs-on)}}

    steps:
      - name: Environment
        run: env | sort

      - name: Login to Docker Hub
        if: needs.determine_registries.outputs.dockerhub == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Split string
        uses: jungwinter/split@v2
        id: split
        with:
          separator: '/'
          msg: ${{ github.ref }}

      - name: Checkout ${{ steps.split.outputs._2 }}
        uses: actions/checkout@v3.3.0
        with:
          ref: ${{ github.event.pull_request.head.sha != '' && github.event.pull_request.head.sha  || github.ref }}
          submodules: 'true'

      - name: Setup repo name to lowercase
        id: reponame
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.repository }}

      - name: Docker meta custom
        if: inputs.custom-tag != ''
        id: meta-custom
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.determine_registries.outputs.registry != '' && needs.determine_registries.outputs.registry || steps.reponame.outputs.lowercase }}
          tags: |
            ${{ inputs.custom-tag }}

      - name: Docker meta
        if: inputs.custom-tag == ''
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.determine_registries.outputs.registry != '' && needs.determine_registries.outputs.registry || steps.reponame.outputs.lowercase }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: builders

      - name: Cache Docker layers
        uses: actions/cache@v3.2.5
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to TCR
        if: needs.determine_registries.outputs.tcr == 'true'
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.registry }}
          username: 100024210916
          password: "eyJhbGciOiJSUzI1NiIsImtpZCI6IkdGQ1Q6UDdHRDpKQTY1OlBES0E6U0RMSjpTN0FTOlMzSUU6NFJHMzpaQzdZOlZOUkY6SU1WQzpZUzRaIn0.eyJvd25lclVpbiI6IjEwMDAyMjI2MTQ2NCIsIm9wZXJhdG9yVWluIjoiMTAwMDI0MjEwOTE2IiwidG9rZW5JZCI6ImNndjRmcm50aDExczRzM2FqbHEwIiwiZXhwIjoxOTk3MTYzMjQ2LCJuYmYiOjE2ODE4MDMyNDYsImlhdCI6MTY4MTgwMzI0Nn0.SK69lLM8lhQYKukkfl5UWNuaoG0wAmWQayBub6NXGhYM97qdu4uqzL7XIB93_RM9rjtw2pwdjUxhd4xNcb770-YoVkH7oWxj7ZReQxCsKpoehiYeI2CmYVJHnkxa5TWoVDZW8iCxA5x_T6XKxIhO-VjBIUA6-z-mwUfrwa5SkeKUxj7K-KXGYAXDsEEAvI_3uK_v7R0fh4NTpiQ2ilBNfG4gUGNAMDpJPlEfSln7EdinjMKpVmshebzLjHkiBUyQChGftBSiwekRXbd5zav8N7yAFM2EnheCsCKg5e0NTe_CydhWF95XSksGUhux1QdAnugLl26BPOzvfIX6ODY4vw"

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          file: ${{ inputs.dockerfile }}
          build-args: ${{ inputs.build-args }}
          context: ${{ inputs.context }}
          platforms: ${{ inputs.platforms }}
          push: true
          tags: ${{ steps.meta-custom.outputs.tags || steps.meta.outputs.tags }}
          labels: ${{ steps.meta-custom.outputs.labels || steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
