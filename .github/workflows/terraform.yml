name: Terraform

on:
  workflow_call:
    inputs:
      runs-on:
        default: "['ubuntu-latest']"
        description: The OSs that the workflow is run on
        required: false
        type: string
      env:
        description: Environment variables in key=value pairs. Can be used to pass secrets that aren't officially supported yet as environment variables
        type: string  # pass in string in export shell format eg. MYVAR=myvalue MYVAR2=myvalue2
        default: ''
        required: false
      timeout:
        default: 10
        description: The number of minutes to wait for the operation to complete.
        required: false
        type: number
      version:
        default: "1.1"
        description: Terraform version to use
        required: false
        type: string
      wrapper:
        default: true
        description: If will use Terraform wrapper
        required: false
        type: string
      fmt_args:
        description: Terraform fmt command arguments
        default: "-check"
        required: false
        type: string
      init_args:
        description: Terraform init command arguments
        default: "-input=false"
        required: false
        type: string
      validate_args:
        description: Terraform validate command arguments
        default: "-no-color"
        required: false
        type: string
      plan_args:
        description: Terraform plan command arguments
        default: "-no-color -input=false -lock=false"
        required: false
        type: string
      apply_args:
        description: Terraform apply command arguments
        default: "-auto-approve -no-color -input=false"
        required: false
        type: string
      terraform_root:
        description: Folder containing all terraform resources, used to shorten terraform directory names
        required: false
        default: "."
        type: string
      directory:
        description: List of directories containing terraform configurations relative to terraform_root. Must be a string. Example "['dev', 'prod']"
        default: "['.']"
        required: false
        type: string
      command_continue_on_error:
        description: If will continue on error
        default: true
        required: false
        type: boolean
      debug:
        description: Debug Mode, true or false
        type: string
        required: false
        default: false

    secrets:
      GH_TOKEN:
        required: false
      TENCENTCLOUD_SECRET_ID:
        required: false
      TENCENTCLOUD_SECRET_KEY:
        required: false
      ALICLOUD_ACCESS_KEY:
        required: false
      ALICLOUD_SECRET_KEY:
        required: false

permissions:
  contents: read
  pull-requests: write

defaults:
  run:
    shell: bash

env:
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  TF_CLI_ARGS_fmt: ${{ inputs.fmt_args }}
  TF_CLI_ARGS_init: ${{ inputs.init_args }}
  TF_CLI_ARGS_validate: ${{ inputs.validate_args }}
  TF_CLI_ARGS_plan: ${{ inputs.plan_args }}
  TF_CLI_ARGS_apply: ${{ inputs.apply_args }}
  TENCENTCLOUD_SECRET_ID: ${{ secrets.TENCENTCLOUD_SECRET_ID }}
  TENCENTCLOUD_SECRET_KEY: ${{ secrets.TENCENTCLOUD_SECRET_KEY }}
  ALICLOUD_ACCESS_KEY: ${{ secrets.ALICLOUD_ACCESS_KEY }}
  ALICLOUD_SECRET_KEY: ${{ secrets.ALICLOUD_SECRET_KEY }}
  ENV: ${{ inputs.env }}
  DEBUG: ${{ inputs.debug == 'true' || '' }}

jobs:
  terraform:
    name: Terraform
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ inputs.timeout }}

    strategy:
      matrix:
        os: ${{ fromJson(inputs.runs-on) }}
        directory: ${{ fromJSON(inputs.directory) }}

    outputs:
      plan: ${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr}}
      outcome: ${{ steps.plan.outcome }}

    defaults:
      run:
        shell: bash

    concurrency:
      group: ${{ github.workflow }}-${{ matrix.directory }}
      cancel-in-progress: false  # don't interrupt Terraform runs, you may end up with stale locks

    steps:
      - name: Setup environment variables
        run: |
          echo "${{ env.ENV }}" >> "$GITHUB_ENV"

      - name: Checkout
        uses: actions/checkout@v3.0.2

      - uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: ${{ inputs.version }}
          terraform_wrapper: ${{ inputs.wrapper }}

      - name: Create Terraform Plugin Cache Dir
        run: mkdir --parents ${{ github.workspace }}/.terraform.d/plugin-cache

      - name: Cache Terraform dependencies
        uses: actions/cache@v3.0.8
        with:
          path: ${{ github.workspace }}/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Fmt
        id: fmt
        if: github.event_name == 'pull_request'
        continue-on-error: ${{ inputs.command_continue_on_error }}
        working-directory: ${{ inputs.terraform_root }}/${{ matrix.directory }}
        run: terraform fmt

      - name: Init
        id: init
        run: terraform -chdir=${{ inputs.terraform_root }}/${{ matrix.directory }} init -upgrade

      - name: Validate
        id: validate
        if: github.event_name == 'pull_request'
        run: terraform -chdir=${{ inputs.terraform_root }}/${{ matrix.directory }} validate

      - name: Plan
        uses: mathiasvr/command-output@v1
        continue-on-error: ${{ inputs.command_continue_on_error }}
        id: plan
        with:
          run: terraform -chdir=${{ inputs.terraform_root }}/${{ matrix.directory }} plan

      - name: Format plan
        id: format-plan
        if: github.event_name == 'pull_request'
        run: |
          plan=$(cat <<'EOF'
          ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
          EOF
          )
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "${plan:0:65536}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            emoji = ("${{ steps.plan.outcome }}" === "success") ? '‚úÖ' : '‚ùå'

            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const botComment = comments.find(comment => {
              return comment.body.includes('${{ github.workflow }} - ${{ matrix.directory }}')
            })

            // 2. Prepare format of the comment
            const output = `### <span aria-hidden="true">${emoji}</span> ${{ github.workflow }} - ${{ matrix.directory }}
            |  Name | Status |
            |---------------------------------|------------------------|
            |<span aria-hidden="true">üñå</span> Format and Style | \`${{ steps.fmt.outcome }}\` |
            |<span aria-hidden="true">‚öôÔ∏è</span> Initialization | \`${{ steps.init.outcome }}\` |
            |<span aria-hidden="true">ü§ñ</span> Validation | \`${{ steps.validate.outcome }}\` |
            |<span aria-hidden="true">üìñ</span> Plan | \`${{ steps.plan.outcome }}\`
             <details><summary>Show Plan</summary>

              \`\`\`terraform
              ${process.env.PLAN}
              \`\`\`

              </details>|`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Apply
        if: contains(steps.plan.outputs.stdout,'No changes.') == false && github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        id: apply
        run: terraform -chdir=${{ inputs.terraform_root }}/${{ matrix.directory }} apply
