name: Node

on:
  workflow_call:
    inputs:
      runs-on:
        default: "['ubuntu-latest']"
        description: The OSs that the workflow is run on
        required: false
        type: string
      versions:
        description: 'Stringified JSON object listing target Node versions'
        default: "['18']"
        required: false
        type: string
      pm:
        description: 'package manager'
        default: yarn
        required: false
        type: string
      env:
        description: Environment variables in key=value pairs. Can be used to pass secrets that aren't officially supported yet as environment variables
        type: string  # pass in string in export shell format eg. MYVAR=myvalue MYVAR2=myvalue2
        default: ''
        required: false
      environment:
        default: Development
        description: The environment to use for the Production.
        type: string
        required: false
      api_url:
        default: 'https://api.xnxk.com'
        description: The API URL to use for the Production.
        type: string
        required: false
      eslint:
        default: true
        description: Whether to run ESLint on the code
        type: boolean
        required: false
      timeout:
        default: 10
        description: The number of minutes to wait for the operation to complete.
        required: false
        type: number
      build_dir:
        default: build
        description: Whether to build the dist folder.
        required: false
        type: string
      fail-fast:
        default: false
        description: "Whether to fail fast or not"
        required: false
        type: boolean
    secrets:
      GH_TOKEN:
        description: 'Personal access token passed from the caller workflow'
        required: false

permissions:
  contents: read
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN == '' && secrets.GITHUB_TOKEN || secrets.GH_TOKEN }}
  GH_TOKEN: ${{ secrets.GH_TOKEN == '' && secrets.GITHUB_TOKEN || secrets.GH_TOKEN }}
  token: ${{ secrets.GH_TOKEN == '' && secrets.GITHUB_TOKEN || secrets.GH_TOKEN }}

jobs:
  build:
    name: ${{ matrix.node }} Build
    timeout-minutes: ${{ inputs.timeout }}

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: ${{fromJson(inputs.runs-on)}}
        node: ${{fromJson(inputs.versions)}}

      fail-fast: ${{ inputs.fail-fast }}

    steps:
      - name: Setup env name to lowercase
        id: environment
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ inputs.environment }}

      - name: Setup environment variables
        run: |
          echo "X_ENV=${{ steps.environment.outputs.lowercase }}" >> $GITHUB_ENV
          echo "X_API_URL=${{ inputs.api_url }}" >> $GITHUB_ENV
          echo "${{ env.ENV }}" >> $GITHUB_ENV

      - name: Environment
        run: env | sort

      - name: Checkout
        uses: actions/checkout@v3.2.0
        with:
          fetch-depth: 1
          ref: ${{ github.head_ref }}

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v3.5.1
        with:
          node-version: ${{ matrix.node }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.4
        if: inputs.pm == 'pnpm'
        with:
          version: 7
          run_install: false

      - name: Setup yarn
        if: inputs.pm == 'yarn'
        run: npm install -g yarn

      - name: Setup Nodejs ${{ matrix.node }}
        uses: actions/setup-node@v3.5.1
        with:
          node-version: ${{ matrix.node }}
          cache: ${{ inputs.pm }}

      - name: Get ${{ inputs.pm }} store directory
        id: cache-dir
        run: |
          if ${{ inputs.pm == 'yarn' }} ; then
            echo "::set-output name=path::$(yarn cache dir)"
            echo "::set-output name=key::dependencies-node-${{ matrix.node }}-${{ inputs.pm }}-${{ hashFiles('**/yarn.lock') }}"
          fi
          if ${{ inputs.pm == 'pnpm' }} ; then
            echo "::set-output name=path::$(pnpm store path)"
            echo "::set-output name=key::dependencies-node-${{ matrix.node }}-${{ inputs.pm }}-${{ hashFiles('**/pnpm-lock.yaml') }}"
          fi

      - name: Setup ${{ inputs.pm }} cache
        uses: actions/cache@v3.2.0
        id: node-modules-cache
        with:
          path: |
            node_modules
            ${{ steps.cache-dir.outputs.path }}
          key: ${{ steps.cache-dir.outputs.key }}
          restore-keys: |
            dependencies-node-${{ matrix.node }}-${{ inputs.pm }}

      - name: Install dependencies with ${{ inputs.pm }}
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: ${{ inputs.pm }} ${{ inputs.pm == 'pnpm' && 'i' || ' ' }} --frozen-lockfile
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
          HUSKY_SKIP_INSTALL: true

      - name: Cache build
        uses: actions/cache@v3.2.0
        id: build-cache
        with:
          path: |
            ${{ inputs.build_dir }}
          key: ${{ runner.os }}-${{ inputs.build_dir }}-${{ github.sha }}

      - name: Build
        uses: StarUbiquitous/command-output@v1.0.1
        continue-on-error: true
        if: steps.build-cache.outputs.cache-hit != 'true'
        id: build
        env:
          DISABLE_ESLINT_PLUGIN: ${{ inputs.eslint }}
        with:
          run: ${{ inputs.pm }} build

      - name: Format output
        id: format-output
        if: github.event_name == 'pull_request'
        run: |
          plan=$(cat <<'EOF'
          ${{ format('{0}{1}', steps.build.outputs.stdout, steps.build.outputs.stderr) }}
          EOF
          )
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "${plan:0:65536}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Update Pull Request
        uses: actions/github-script@v6.3.3
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            emoji = ("${{ steps.build.outcome }}" === "success") ? '✅' : '❌'

            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const botComment = comments.find(comment => {
              return comment.body.includes('${{ github.workflow }}')
            })

            // 2. Prepare format of the comment
            const output = `#### ${emoji} ${{ github.workflow }}

            <details><summary>Show Details</summary>

            \`\`\`ts
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Status
        if: steps.build.outcome == 'failure'
        run: |
          exit 1
