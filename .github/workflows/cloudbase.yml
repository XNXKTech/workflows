name: Cloudbase

on:
  workflow_call:
    inputs:
      runs-on:
        default: "['ubuntu-latest']"
        description: The OSs that the workflow is run on
        required: false
        type: string
      env:
        description: Environment variables in key=value pairs. Can be used to pass secrets that aren't officially supported yet as environment variables
        type: string  # pass in string in export shell format eg. MYVAR=myvalue MYVAR2=myvalue2
        default: NODE_ENV=production
        required: false
      environment:
        default: Production
        description: The environment to use for the Production.
        type: string
        required: false
      environment_url:
        default: https://prod.example.com
        description: The URL to use for the Production.
        type: string
        required: false
      timeout:
        default: 10
        description: The number of minutes to wait for the operation to complete.
        required: false
        type: number
      build_dir:
        default: build
        description: Whether to build the dist folder.
        required: false
        type: string
    secrets:
      SECRET_ID:
        description: "The ID of the secret to use for the Cloudbase Deploy"
        required: true
      SECRET_KEY:
        description: "The secret key for the Cloudbase Deploy"
        required: true
      ENV_ID:
        description: "The envId of the Cloudbase Deploy"
        required: true

defaults:
  run:
    shell: bash -euxo pipefail {0}

env:
  SECRET_ID: ${{ secrets.SECRET_ID }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  ENV_ID: ${{ secrets.ENV_ID }}
  ENV: ${{ inputs.env }}

jobs:
  cloudbase:
    name: Tencent Cloudbase
    timeout-minutes: ${{ inputs.timeout }}

    if: ${{ github.event_name != 'pull_request' }}

    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.environment_url }}

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: ${{fromJson(inputs.runs-on)}}

    concurrency:
      group: ${{ github.workflow }}-${{ inputs.environment }}
      cancel-in-progress: false

    steps:
      - name: Setup environment variables
        run: |
          echo "${{ env.ENV }}" >> "$GITHUB_ENV"

      - name: Environment
        run: env | sort

      - name: Split string
        uses: jungwinter/split@v2
        id: split
        with:
          separator: '/'
          msg: ${{ github.ref }}

      - name: Checkout ${{ steps.split.outputs._2 }}
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.split.outputs._2 }}
          submodules: 'true'

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v3.3.0
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Setup yarn
        run: npm install -g yarn

      - name: Setup Nodejs with yarn caching
        uses: actions/setup-node@v3.3.0
        with:
          node-version: ${{ matrix.node }}
          cache: yarn

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Cloudbase
        uses: actions/cache@v3.0.4
        id: cloudbase-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-cloudbase
          restore-keys: |
            ${{ runner.os }}-cloudbase

      - name: Download and install cloudbase cli
        if: steps.cloudbase-cache.outputs.cache-hit != 'true'
        run: |
          yarn global add @cloudbase/cli
          echo "$(yarn global bin)" >> $GITHUB_PATH

      - uses: actions/cache@v3.0.4
        id: node-modules-cache
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn

      - name: Install package.json dependencies with Yarn
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
          HUSKY_SKIP_INSTALL: true

      - name: Cache build
        uses: actions/cache@v3.0.4
        id: build-cache
        with:
          path: |
            ${{ inputs.build_dir }}
          key: ${{ runner.os }}-${{ inputs.build_dir }}-${{ github.sha }}

      - name: Build
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: yarn build

      - name: Login to Cloudbase
        run: |
          tcb login --apiKeyId ${{ env.SECRET_ID }} --apiKey ${{ env.SECRET_KEY }}

      - name: Deploy static to Tencent CloudBase
        id: deployStatic
        run: |
          tcb hosting deploy ${{ inputs.build_dir }} -e ${{ env.ENV_ID }}
