name: Node Eslint

on:
  workflow_call:
    inputs:
      runs-on:
        default: "['ubuntu-latest']"
        description: The OSs that the workflow is run on
        required: false
        type: string
      versions:
        description: 'Stringified JSON object listing target Node versions'
        default: "['18']"
        required: false
        type: string
    secrets:
      GH_TOKEN:
        description: 'Personal access token passed from the caller workflow'
        required: false

permissions:
  contents: read
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN == '' && secrets.GITHUB_TOKEN || secrets.GH_TOKEN }}
  GH_TOKEN: ${{ secrets.GH_TOKEN == '' && secrets.GITHUB_TOKEN || secrets.GH_TOKEN }}
  token: ${{ secrets.GH_TOKEN == '' && secrets.GITHUB_TOKEN || secrets.GH_TOKEN }}

jobs:
  build:

    name: ${{ matrix.node-versions }} Eslint

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: ${{fromJson(inputs.runs-on)}}
        node-versions: ${{fromJson(inputs.versions)}}

    steps:
      - uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 1
          ref: ${{ github.head_ref }}

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node }}

      - name: Setup yarn
        run: npm install -g yarn

      - name: Setup Nodejs with yarn caching
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node }}
          cache: yarn

      - uses: actions/cache@v3.2.5
        id: node-modules-cache
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn

      - name: Install package.json dependencies with Yarn
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile --ignore-engines --ignore-optional
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
          HUSKY_SKIP_INSTALL: true

      - name: ESLint
        uses: StarUbiquitous/command-output@v1.0.1
        continue-on-error: true
        id: eslint
        with:
          run: npx eslint . --ext .js,.jsx,.ts,.tsx --quiet

      - name: Format plan
        id: format-plan
        if: github.event_name == 'pull_request'
        run: |
          plan=$(cat <<'EOF'
          ${{ format('{0}{1}', steps.eslint.outputs.stdout, steps.eslint.outputs.stderr) }}
          EOF
          )
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "${plan:0:65536}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Update Pull Request
        uses: actions/github-script@v6.4.0
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            emoji = ("${{ steps.eslint.outcome }}" === "success") ? '✅' : '❌'

            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const botComment = comments.find(comment => {
              return comment.body.includes('Eslint Check')
            })

            // 2. Prepare format of the comment
            const output = `#### ${emoji} Eslint Check

            <details><summary>Show Details</summary>

            \`\`\`ts
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Status
        if: steps.eslint.outcome == 'failure'
        run: |
          exit 1
